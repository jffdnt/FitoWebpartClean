"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfigFileAsync = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const config_v2_1 = require("./interfaces/config-v2");
const config_2_0_schema_json_1 = __importDefault(require("./schemas/config.2.0.schema.json"));
const V2_SCHEMA = node_core_library_1.JsonSchema.fromLoadedObject(config_2_0_schema_json_1.default);
/**
 * Read a V1 config file and translate it to the latest schema.
 */
async function _tryV1Async(filename, fileMetadata) {
    const result = {
        missingFile: false,
        version: '1.0',
        isLatestVersion: false
    };
    const v1Schema = node_core_library_1.JsonSchema.fromLoadedObject(await Promise.resolve().then(() => __importStar(require('./schemas/config.1.0.schema.json'))));
    try {
        const v1Config = await node_core_library_1.JsonFile.loadAndValidateAsync(filename, v1Schema);
        const configData = {
            $schema: config_v2_1.configJsonSchemaUrl,
            version: '2.0',
            bundles: {},
            localizedResources: v1Config.localizedResources,
            externals: v1Config.externals
        };
        if (v1Config.entries) {
            for (const entry of v1Config.entries) {
                const name = path.basename(entry.outputPath, path.extname(entry.outputPath));
                configData.bundles[name] = {
                    components: [
                        {
                            entrypoint: entry.entry,
                            manifest: entry.manifest
                        }
                    ]
                };
            }
        }
        if (configData.localizedResources) {
            for (const resourceName of Object.getOwnPropertyNames(configData.localizedResources)) {
                const resourcePath = configData.localizedResources[resourceName];
                configData.localizedResources[resourceName] = path.posix.join('lib', resourcePath);
            }
        }
        result.configData = configData;
    }
    catch (error) {
        if (!fileMetadata.version) {
            result.readError = error;
        }
        else {
            // Failed to validate, not the right version
            return undefined;
        }
    }
    return result;
}
/**
 * Read a V2 config file. This is currently the latest config version
 */
async function _tryV2Async(filename, fileMetadata) {
    const result = {
        missingFile: false,
        version: '2.0',
        isLatestVersion: true
    };
    try {
        const configData = await node_core_library_1.JsonFile.loadAndValidateAsync(filename, V2_SCHEMA);
        result.configData = configData;
    }
    catch (error) {
        if (fileMetadata.version === result.version) {
            result.readError = error;
        }
        else {
            // Failed to validate, not the right version
            return undefined;
        }
    }
    return result;
}
const _parseFunctions = [_tryV2Async, _tryV1Async];
/**
 * @internal
 */
async function readConfigFileAsync(logVerbose, filename) {
    let fileMetadata;
    try {
        // Read the file to detect basic metadata
        fileMetadata = await node_core_library_1.JsonFile.loadAsync(filename);
    }
    catch (error) {
        if (node_core_library_1.FileSystem.isNotExistError(error)) {
            return {
                missingFile: true
            };
        }
        else {
            return {
                missingFile: false,
                readError: error
            };
        }
    }
    logVerbose(`Found config file: ${path.basename(filename)}`);
    let result = undefined;
    for (let i = 0; i < _parseFunctions.length && !result; i++) {
        result = await _parseFunctions[i](filename, fileMetadata);
    }
    return (result || {
        missingFile: false,
        version: fileMetadata.version,
        isLatestVersion: false,
        readError: 'Unknown config.json file format.'
    });
}
exports.readConfigFileAsync = readConfigFileAsync;
//# sourceMappingURL=configJsonReader.js.map