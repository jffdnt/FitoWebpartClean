"use strict";
/**
 * Creates a client-side app package and writes it to disk
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const terminal_1 = require("@rushstack/terminal");
const normalizeSolutionDefinition_1 = __importDefault(require("./utils/normalizeSolutionDefinition"));
const createSolutionXml_1 = __importDefault(require("./xmlGenerators/createSolutionXml"));
const readCustomFeatures_1 = require("./utils/readCustomFeatures");
const validateSolutionDefinition_1 = require("./utils/validateSolutionDefinition");
const readResources_1 = require("./utils/readResources");
const writePackage_1 = require("./writePackage");
/**
 * Creates and writes a package to disk using a package definition and manifest mapping
 */
async function createPackageAsync(terminal, xmlSerializationOptions, config, manifests, noSpppkg) {
    // @todo instead of using try/catch we should move config validation to a separate function
    try {
        terminal.writeLine(terminal_1.Colorize.yellow('Verifying configuration...'));
        if (!manifests || !manifests.size) {
            throw new Error('The webparts manifests list is empty. ' +
                'Please ensure you have done a build and that your config file is pointed at the correct folder.');
        }
        if (!config.paths.zippedPackage || config.paths.zippedPackage === '') {
            throw new Error('The package-solution.json config is missing a package name.');
        }
        terminal.writeLine(terminal_1.Colorize.green('Done!'));
        terminal.writeLine();
        terminal.writeLine(terminal_1.Colorize.yellow('Normalizing solution information...'));
        (0, normalizeSolutionDefinition_1.default)(terminal, config, manifests);
        terminal.writeLine(terminal_1.Colorize.green('Done!'));
        terminal.writeLine();
        terminal.writeLine(terminal_1.Colorize.yellow('Reading custom Feature XML...'));
        try {
            const customFeatures = await (0, readCustomFeatures_1.readCustomFeaturesAsync)(terminal, config);
            terminal.writeLine(terminal_1.Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(terminal_1.Colorize.yellow('Validating App Package...'));
            (0, validateSolutionDefinition_1.validateSolutionDefinition)(terminal, config, customFeatures, manifests);
            terminal.writeLine(terminal_1.Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(terminal_1.Colorize.yellow('Reading resources...'));
            const resources = await (0, readResources_1.readResourcesAsync)(terminal, config);
            terminal.writeLine(terminal_1.Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(terminal_1.Colorize.yellow('Reading Sharepoint Assets & Creating XML...'));
            const solutionXml = (0, createSolutionXml_1.default)(terminal, xmlSerializationOptions, config.solution, customFeatures.customFeatureFilepath, resources, config.contentTypes);
            terminal.writeLine(terminal_1.Colorize.green('Done!'));
            terminal.writeLine();
            solutionXml.customFiles = customFeatures.files;
            terminal.writeLine(terminal_1.Colorize.yellow(`Writing solution XML to ${config.paths.debugDir}...`));
            await (0, writePackage_1.writePackageAsync)(terminal, solutionXml, config, noSpppkg);
            terminal.writeLine(terminal_1.Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(terminal_1.Colorize.bold(terminal_1.Colorize.green('ALL DONE!')));
            terminal.writeLine();
        }
        catch (error) {
            terminal.writeErrorLine(terminal_1.Colorize.red(error));
        }
    }
    catch (error) {
        terminal.writeErrorLine(terminal_1.Colorize.red(error));
        if (error.stack) {
            terminal.writeErrorLine(error.stack);
        }
        throw error;
    }
}
exports.default = createPackageAsync;
//# sourceMappingURL=createPackage.js.map