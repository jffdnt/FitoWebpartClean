"use strict";
/**
 * Reads relative file paths given a working directory and a glob.
 * Relative paths are generated by removing a certain
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRelativeFilePathsAsync = exports.getFilesAsync = void 0;
const fast_glob_1 = __importDefault(require("fast-glob"));
const node_core_library_1 = require("@rushstack/node-core-library");
const terminal_1 = require("@rushstack/terminal");
/** Loads a directory of files into IFile objects */
async function getFilesAsync(terminal, cwd, globs, foundMessage = 'Found file: ') {
    const filenames = await (0, fast_glob_1.default)(globs, { cwd: cwd });
    const result = [];
    for (const filename of filenames) {
        terminal.writeLine(foundMessage + filename);
        result.push({
            filename,
            contents: await node_core_library_1.FileSystem.readFileToBufferAsync(`${cwd}/${filename}`)
        });
    }
    return result;
}
exports.getFilesAsync = getFilesAsync;
/** Reads the list of relative path from a specified folder */
async function getRelativeFilePathsAsync(terminal, cwd, globs, foundMessage = 'Found file: ') {
    const files = await (0, fast_glob_1.default)(globs, {
        cwd
    });
    for (const filename of files) {
        terminal.writeLine(terminal_1.Colorize.cyan(foundMessage + filename));
    }
    return files;
}
exports.getRelativeFilePathsAsync = getRelativeFilePathsAsync;
//# sourceMappingURL=getFiles.js.map