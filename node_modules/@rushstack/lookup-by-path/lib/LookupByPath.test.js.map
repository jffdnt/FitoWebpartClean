{"version":3,"file":"LookupByPath.test.js","sourceRoot":"","sources":["../src/LookupByPath.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iDAA8C;AAE9C,QAAQ,CAAC,2BAAY,CAAC,mBAAmB,CAAC,IAAI,EAAE,GAAG,EAAE;IACnD,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC3C,MAAM,MAAM,GAAG,CAAC,GAAG,2BAAY,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,MAAM,GAAG,CAAC,GAAG,2BAAY,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,MAAM,GAAG,CAAC,GAAG,2BAAY,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC,CAAC;QACtE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,MAAM,GAAG,CAAC,GAAG,2BAAY,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;QACpE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,MAAM,GAAG,CAAC,GAAG,2BAAY,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;QAC9D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,2BAAY,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE;IACvD,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,CAAC,IAAI,2BAAY,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,CAAC,IAAI,2BAAY,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,IAAI,GAAyB,IAAI,2BAAY,CAAC;YAClD,CAAC,KAAK,EAAE,CAAC,CAAC;YACV,CAAC,KAAK,EAAE,CAAC,CAAC;YACV,CAAC,KAAK,EAAE,CAAC,CAAC;SACX,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,IAAI,GAAyB,IAAI,2BAAY,CAAC;YAClD,CAAC,KAAK,EAAE,CAAC,CAAC;YACV,CAAC,KAAK,EAAE,CAAC,CAAC;YACV,CAAC,KAAK,EAAE,CAAC,CAAC;SACX,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,0EAA0E,EAAE,GAAG,EAAE;QAClF,MAAM,IAAI,GAAyB,IAAI,2BAAY,CAAC;YAClD,CAAC,KAAK,EAAE,CAAC,CAAC;YACV,CAAC,KAAK,EAAE,CAAC,CAAC;YACV,CAAC,KAAK,EAAE,CAAC,CAAC;YACV,CAAC,SAAS,EAAE,CAAC,CAAC;YACd,CAAC,aAAa,EAAE,CAAC,CAAC;YAClB,CAAC,SAAS,EAAE,CAAC,CAAC;YACd,CAAC,iBAAiB,EAAE,CAAC,CAAC;SACvB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAEtD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAEjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAErD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAErD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACrD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAErE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAElD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAEzD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACxD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,IAAI,GAAyB,IAAI,2BAAY,CACjD;YACE,CAAC,SAAS,EAAE,CAAC,CAAC;YACd,CAAC,SAAS,EAAE,CAAC,CAAC;SACf,EACD,GAAG,CACJ,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACrD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC7D,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,2BAAY,CAAC,SAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,GAAG,EAAE;IAChE,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,CAAC,IAAI,2BAAY,EAAE,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,CAAC,IAAI,2BAAY,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;IACvG,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,IAAI,GAAyB,IAAI,2BAAY,CAAC;YAClD,CAAC,KAAK,EAAE,CAAC,CAAC;YACV,CAAC,QAAQ,EAAE,CAAC,CAAC;YACb,CAAC,KAAK,EAAE,CAAC,CAAC;SACX,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAC3E,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAC9E,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAC3E,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,IAAI,GAAyB,IAAI,2BAAY,CAAC;YAClD,CAAC,KAAK,EAAE,CAAC,CAAC;YACV,CAAC,QAAQ,EAAE,CAAC,CAAC;YACb,CAAC,KAAK,EAAE,CAAC,CAAC;YACV,CAAC,SAAS,EAAE,CAAC,CAAC;SACf,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC;YACrD,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE;SAClC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAClF,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAC/E,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { LookupByPath } from './LookupByPath';\n\ndescribe(LookupByPath.iteratePathSegments.name, () => {\n  it('returns empty for an empty string', () => {\n    const result = [...LookupByPath.iteratePathSegments('')];\n    expect(result.length).toEqual(0);\n  });\n  it('returns the only segment of a trival string', () => {\n    const result = [...LookupByPath.iteratePathSegments('foo')];\n    expect(result).toEqual(['foo']);\n  });\n  it('treats backslashes as ordinary characters, per POSIX', () => {\n    const result = [...LookupByPath.iteratePathSegments('foo\\\\bar\\\\baz')];\n    expect(result).toEqual(['foo\\\\bar\\\\baz']);\n  });\n  it('iterates segments', () => {\n    const result = [...LookupByPath.iteratePathSegments('foo/bar/baz')];\n    expect(result).toEqual(['foo', 'bar', 'baz']);\n  });\n  it('returns correct last single character segment', () => {\n    const result = [...LookupByPath.iteratePathSegments('foo/a')];\n    expect(result).toEqual(['foo', 'a']);\n  });\n});\n\ndescribe(LookupByPath.prototype.findChildPath.name, () => {\n  it('returns empty for an empty tree', () => {\n    expect(new LookupByPath().findChildPath('foo')).toEqual(undefined);\n  });\n  it('returns the matching node for a trivial tree', () => {\n    expect(new LookupByPath([['foo', 1]]).findChildPath('foo')).toEqual(1);\n  });\n  it('returns the matching node for a single-layer tree', () => {\n    const tree: LookupByPath<number> = new LookupByPath([\n      ['foo', 1],\n      ['bar', 2],\n      ['baz', 3]\n    ]);\n\n    expect(tree.findChildPath('foo')).toEqual(1);\n    expect(tree.findChildPath('bar')).toEqual(2);\n    expect(tree.findChildPath('baz')).toEqual(3);\n    expect(tree.findChildPath('buzz')).toEqual(undefined);\n  });\n  it('returns the matching parent for multi-layer queries', () => {\n    const tree: LookupByPath<number> = new LookupByPath([\n      ['foo', 1],\n      ['bar', 2],\n      ['baz', 3]\n    ]);\n\n    expect(tree.findChildPath('foo/bar')).toEqual(1);\n    expect(tree.findChildPath('bar/baz')).toEqual(2);\n    expect(tree.findChildPath('baz/foo')).toEqual(3);\n    expect(tree.findChildPath('foo/foo')).toEqual(1);\n  });\n  it('returns the matching parent for multi-layer queries in multi-layer trees', () => {\n    const tree: LookupByPath<number> = new LookupByPath([\n      ['foo', 1],\n      ['bar', 2],\n      ['baz', 3],\n      ['foo/bar', 4],\n      ['foo/bar/baz', 5],\n      ['baz/foo', 6],\n      ['baz/baz/baz/baz', 7]\n    ]);\n\n    expect(tree.findChildPath('foo/foo')).toEqual(1);\n    expect(tree.findChildPath('foo/bar\\\\baz')).toEqual(1);\n\n    expect(tree.findChildPath('bar/baz')).toEqual(2);\n\n    expect(tree.findChildPath('baz/bar')).toEqual(3);\n    expect(tree.findChildPath('baz/baz')).toEqual(3);\n    expect(tree.findChildPath('baz/baz/baz')).toEqual(3);\n\n    expect(tree.findChildPath('foo/bar')).toEqual(4);\n    expect(tree.findChildPath('foo/bar/foo')).toEqual(4);\n\n    expect(tree.findChildPath('foo/bar/baz')).toEqual(5);\n    expect(tree.findChildPath('foo/bar/baz/baz/baz/baz/baz')).toEqual(5);\n\n    expect(tree.findChildPath('baz/foo/')).toEqual(6);\n\n    expect(tree.findChildPath('baz/baz/baz/baz')).toEqual(7);\n\n    expect(tree.findChildPath('')).toEqual(undefined);\n    expect(tree.findChildPath('foofoo')).toEqual(undefined);\n    expect(tree.findChildPath('foo\\\\bar\\\\baz')).toEqual(undefined);\n  });\n  it('handles custom delimiters', () => {\n    const tree: LookupByPath<number> = new LookupByPath(\n      [\n        ['foo,bar', 1],\n        ['foo/bar', 2]\n      ],\n      ','\n    );\n\n    expect(tree.findChildPath('foo/bar,baz')).toEqual(2);\n    expect(tree.findChildPath('foo,bar/baz')).toEqual(undefined);\n    expect(tree.findChildPathFromSegments(['foo', 'bar', 'baz'])).toEqual(1);\n  });\n});\n\ndescribe(LookupByPath.prototype.findLongestPrefixMatch.name, () => {\n  it('returns empty for an empty tree', () => {\n    expect(new LookupByPath().findLongestPrefixMatch('foo')).toEqual(undefined);\n  });\n  it('returns the matching node for a trivial tree', () => {\n    expect(new LookupByPath([['foo', 1]]).findLongestPrefixMatch('foo')).toEqual({ value: 1, index: 3 });\n  });\n  it('returns the matching node for a single-layer tree', () => {\n    const tree: LookupByPath<number> = new LookupByPath([\n      ['foo', 1],\n      ['barbar', 2],\n      ['baz', 3]\n    ]);\n\n    expect(tree.findLongestPrefixMatch('foo')).toEqual({ value: 1, index: 3 });\n    expect(tree.findLongestPrefixMatch('barbar')).toEqual({ value: 2, index: 6 });\n    expect(tree.findLongestPrefixMatch('baz')).toEqual({ value: 3, index: 3 });\n    expect(tree.findLongestPrefixMatch('buzz')).toEqual(undefined);\n  });\n  it('returns the matching parent for multi-layer queries', () => {\n    const tree: LookupByPath<number> = new LookupByPath([\n      ['foo', 1],\n      ['barbar', 2],\n      ['baz', 3],\n      ['foo/bar', 4]\n    ]);\n\n    expect(tree.findLongestPrefixMatch('foo/bar')).toEqual({\n      value: 4,\n      index: 7,\n      lastMatch: { value: 1, index: 3 }\n    });\n    expect(tree.findLongestPrefixMatch('barbar/baz')).toEqual({ value: 2, index: 6 });\n    expect(tree.findLongestPrefixMatch('baz/foo')).toEqual({ value: 3, index: 3 });\n    expect(tree.findLongestPrefixMatch('foo/foo')).toEqual({ value: 1, index: 3 });\n  });\n});\n"]}