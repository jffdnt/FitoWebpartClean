import type { Compiler, LoaderContext, WebpackPluginInstance } from 'webpack';
import { type ILocalizationFile } from '@rushstack/localization-utilities';
import type { ILocalizationPluginOptions } from './interfaces';
/**
 * @public
 */
export interface IStringPlaceholder {
    /**
     * The literal string that will be injected for later replacement.
     */
    value: string;
    /**
     * The identifier for this particular placeholder, for lookup.
     */
    suffix: string;
    /**
     * The values of this string in each output locale.
     */
    valuesByLocale: Map<string, string>;
    /**
     * The key used to identify the source file containing the string.
     */
    locFilePath: string;
    /**
     * The identifier of the string within its original source file.
     */
    stringName: string;
}
/**
 * Gets the instance of the LocalizationPlugin bound to the specified webpack compiler.
 * Used by loaders.
 */
export declare function getPluginInstance(compiler: Compiler | undefined): LocalizationPlugin;
/**
 * This plugin facilitates localization in webpack.
 *
 * @public
 */
export declare class LocalizationPlugin implements WebpackPluginInstance {
    readonly stringKeys: Map<string, IStringPlaceholder>;
    /**
     * @internal
     */
    readonly _options: ILocalizationPluginOptions;
    private readonly _resolvedTranslatedStringsFromOptions;
    private _stringPlaceholderCounter;
    private readonly _stringPlaceholderMap;
    private _passthroughLocaleName;
    private _defaultLocale;
    private _noStringsLocaleName;
    private _fillMissingTranslationStrings;
    private _formatLocaleForFilename;
    private readonly _pseudolocalizers;
    /**
     * The outermost map's keys are the locale names.
     * The middle map's keys are the resolved, file names.
     * The innermost map's keys are the string identifiers and its values are the string values.
     */
    private _resolvedLocalizedStrings;
    constructor(options: ILocalizationPluginOptions);
    /**
     * Apply this plugin to the specified webpack compiler.
     */
    apply(compiler: Compiler): void;
    /**
     * @public
     *
     * @returns An object mapping the string keys to placeholders
     */
    addDefaultLocFileAsync(context: LoaderContext<{}>, localizedFileKey: string, localizedResourceData: ILocalizationFile): Promise<Record<string, string>>;
    /**
     * @public
     */
    getPlaceholder(localizedFileKey: string, stringName: string): IStringPlaceholder | undefined;
    /**
     * @internal
     */
    getDataForSerialNumber(serialNumber: string): IStringPlaceholder | undefined;
    private _addLocFileAndGetPlaceholders;
    private _addTranslations;
    private _initializeAndValidateOptions;
}
//# sourceMappingURL=LocalizationPlugin.d.ts.map