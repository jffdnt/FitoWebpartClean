import type { Asset, Chunk, Compilation, sources } from 'webpack';
import type { LocalizationPlugin } from './LocalizationPlugin';
type FormatLocaleForFilenameFn = (locale: string) => string;
export interface IProcessAssetOptionsBase {
    plugin: LocalizationPlugin;
    compilation: Compilation;
    chunk: Chunk;
    asset: Asset;
}
export interface IProcessNonLocalizedAssetOptions extends IProcessAssetOptionsBase {
    fileName: string;
    noStringsLocaleName: string;
    formatLocaleForFilenameFn: FormatLocaleForFilenameFn;
}
export interface IProcessLocalizedAssetOptions extends IProcessAssetOptionsBase {
    locales: Set<string>;
    fillMissingTranslationStrings: boolean;
    defaultLocale: string;
    filenameTemplate: Parameters<typeof Compilation.prototype.getAssetPath>[0];
    formatLocaleForFilenameFn: FormatLocaleForFilenameFn;
}
export interface IProcessAssetResult {
    filename: string;
    asset: sources.Source;
}
export declare const PLACEHOLDER_REGEX: RegExp;
export declare function processLocalizedAsset(options: IProcessLocalizedAssetOptions): Record<string, string>;
export declare function processNonLocalizedAsset(options: IProcessNonLocalizedAssetOptions): void;
export {};
//# sourceMappingURL=AssetProcessor.d.ts.map