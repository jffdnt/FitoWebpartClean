"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const colors_1 = __importDefault(require("colors"));
const settingsManager_1 = require("./settingsManager");
const commander_1 = require("commander");
const helpers_1 = require("./helpers");
class Logger {
    static log(message) {
        console.log(`${this.baseMessage()} ${message}`);
    }
    static error(message) {
        if (!message) {
            message = 'An unexpected error occurred';
        }
        console.log(`${this.baseMessage()} ${colors_1.default.red(message)}`);
    }
    static debug(...messages) {
        if (!settingsManager_1.serveSettings.debug)
            return;
        for (const message of messages) {
            if (typeof message !== 'object') {
                console.log(`${this.baseMessage()} ${colors_1.default.yellow(message.toString())}`);
            }
            else {
                console.log(message);
            }
        }
    }
    static debugEnvironmentInfo() {
        const command = (0, helpers_1.getNpmScriptValue)();
        const npmCommand = process.env.npm_lifecycle_event;
        Logger.debug(`fast-serve: ${commander_1.program.version()}`, `node: ${process.version}`, `platform: ${process.platform}`, `command: ${command == null ? 'CLI' : `npm[${npmCommand}]="${command}"`}`);
        Logger.debug('Settings:', settingsManager_1.serveSettings);
    }
    static baseMessage() {
        return `${this.getTimeString()} [${colors_1.default.cyan('fast-serve')}]`;
    }
    static getTimeString() {
        const now = new Date();
        return `[${colors_1.default.gray(`${('0' + now.getHours()).slice(-2)}:${('0' + now.getMinutes()).slice(-2)}:${('0' + now.getSeconds()).slice(-2)}`)}]`;
    }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map