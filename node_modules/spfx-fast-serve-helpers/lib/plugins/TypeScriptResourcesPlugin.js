"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptResourcesPlugin = void 0;
const path = __importStar(require("path"));
const helpers_1 = require("../common/helpers");
class TypeScriptResourcesPlugin {
    constructor() {
        this.entryName = 'ts-resources';
        const config = (0, helpers_1.getJSONFile)('config/config.json');
        this.resourcesMap = (0, helpers_1.createResourcesMap)(config.localizedResources);
    }
    apply(compiler) {
        const allKeys = Object.keys(this.resourcesMap);
        if (!(allKeys === null || allKeys === void 0 ? void 0 : allKeys.length)) {
            return;
        }
        compiler.options.entry[this.entryName] = {
            import: [path.resolve(__dirname, '../loaders', 'TypeScriptResourcesEntryLoader!')]
        };
        const tsLoader = compiler.options.module.rules[0].use[0];
        compiler.options.module.rules[0].use = [
            {
                loader: require.resolve('../loaders/TypeScriptResourcesLoader'),
                options: this.resourcesMap
            },
            {
                ...tsLoader
            }
        ];
    }
}
exports.TypeScriptResourcesPlugin = TypeScriptResourcesPlugin;
//# sourceMappingURL=TypeScriptResourcesPlugin.js.map