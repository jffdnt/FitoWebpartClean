"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyOpenUrlSetting = void 0;
const colors_1 = __importDefault(require("colors"));
const url_1 = require("url");
const helpers_1 = require("../common/helpers");
const logger_1 = require("../common/logger");
const settingsManager_1 = require("../common/settingsManager");
const SERVE_SPFX_KEY = 'SPFX_SERVE_TENANT_DOMAIN';
const SERVE_SPFX_PLACEHOLDER = '{tenantDomain}';
const applyOpenUrlSetting = (config) => {
    var _a;
    const configName = settingsManager_1.serveSettings.config;
    if (configName) {
        const serveConfig = (0, helpers_1.getJSONFile)('config/serve.json');
        if ((_a = serveConfig.serveConfigurations) === null || _a === void 0 ? void 0 : _a[configName]) {
            const configValue = serveConfig.serveConfigurations[configName];
            let openUrl = new url_1.URL(configValue.pageUrl);
            if (process.env[SERVE_SPFX_KEY] != null) {
                openUrl = new url_1.URL(configValue.pageUrl.replace(SERVE_SPFX_PLACEHOLDER, process.env[SERVE_SPFX_KEY]));
            }
            openUrl.searchParams.set('debugManifestsFile', `https://${config.devServer.host}:${config.devServer.port}/temp/manifests.js`);
            openUrl.searchParams.set('loadSPFX', 'true');
            if (configValue.customActions) {
                openUrl.searchParams.set('customActions', JSON.stringify(configValue.customActions));
            }
            if (configValue.fieldCustomizers) {
                openUrl.searchParams.set('fieldCustomizers', JSON.stringify(configValue.fieldCustomizers));
            }
            if (configValue.formCustomizer) {
                for (const property in configValue.formCustomizer) {
                    if (Object.prototype.hasOwnProperty.call(configValue.formCustomizer, property)) {
                        const value = configValue.formCustomizer[property];
                        if (typeof value === 'object') {
                            openUrl.searchParams.set(property, JSON.stringify(value));
                        }
                        else {
                            openUrl.searchParams.set(property, value);
                        }
                    }
                }
            }
            config.devServer.open = openUrl.href;
            logger_1.Logger.log(`Loading ${colors_1.default.yellow(configName)} serve configuration and opening ${colors_1.default.green(openUrl.href)}`);
        }
        else {
            throw new Error(`Unable to find serve configuration with name '${configName}' in serve.json`);
        }
        return;
    }
    if (!settingsManager_1.serveSettings.openUrl) {
        config.devServer.open = false;
    }
    else {
        if (process.env[SERVE_SPFX_KEY] != null) {
            config.devServer.open = new url_1.URL(settingsManager_1.serveSettings.openUrl.replace(SERVE_SPFX_PLACEHOLDER, process.env[SERVE_SPFX_KEY])).href;
        }
        else {
            config.devServer.open = settingsManager_1.serveSettings.openUrl;
        }
    }
};
exports.applyOpenUrlSetting = applyOpenUrlSetting;
//# sourceMappingURL=openUrl.js.map