"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyhotRefresh = void 0;
const ReactRefreshPlugin = require('@pmmmwh/react-refresh-webpack-plugin');
const react_refresh_typescript_1 = __importDefault(require("react-refresh-typescript"));
const settingsManager_1 = require("../common/settingsManager");
const applyhotRefresh = (config) => {
    if (!settingsManager_1.serveSettings.hotRefresh) {
        return;
    }
    const tsLoaderRule = getTsRule(config.module.rules);
    for (const useRule of tsLoaderRule.use) {
        if (useRule.loader.indexOf('ts-loader') !== -1) {
            useRule.options.getCustomTransformers = () => ({
                before: [(0, react_refresh_typescript_1.default)()],
            });
        }
    }
    config.plugins.push(new ReactRefreshPlugin());
    config.devServer.hot = true;
    let indx = config.externals.indexOf('react');
    config.externals.splice(indx, 1);
    indx = config.externals.indexOf('react-dom');
    config.externals.splice(indx, 1);
};
exports.applyhotRefresh = applyhotRefresh;
function getTsRule(rules) {
    for (const rule of rules) {
        if (rule.test) {
            const test = rule.test.toString();
            if (test.indexOf('.tsx?') !== -1) {
                return rule;
            }
        }
    }
    throw new Error('Unable to resolve ts-loader rule');
}
//# sourceMappingURL=hotRefresh.js.map