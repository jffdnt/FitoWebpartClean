#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const helpers_1 = require("./common/helpers");
const consts_1 = require("./common/consts");
const startDevServer_1 = require("./commands/startDevServer");
const createWebpackExtend_1 = require("./commands/createWebpackExtend");
const createConfigFile_1 = require("./commands/createConfigFile");
const packageJson = (0, helpers_1.getJSONFile)(`node_modules/${consts_1.fastServemoduleName}/package.json`);
commander_1.program
    .name('fast-serve')
    .description('SPFx Fast Serve Tool')
    .option('-p, --port <port>', 'HTTP port to use to serve the bundles', helpers_1.customParseInt, 4321)
    .option('-m, --memory <memory>', 'Memory limit for the dev server in MB', helpers_1.customParseInt, 8192)
    .option('-l, --isLibraryComponent [value]', 'Should be true, when running inside library component project type', helpers_1.customParseBoolean, false)
    .option('-i, --locale <locale-code>', 'Local code when running in a multi-language scenario', undefined)
    .option('-c, --config <config-name>', 'Serve configuration to run on a startup', undefined)
    .option('-o, --openUrl <url>', 'Url to open on a startup. If empty, no url will be opened', undefined)
    .addOption(new commander_1.Option('-g, --loggingLevel <level>', 'Logging level, "minimal" notifies about errors and new builds only, "normal" adds bundle information, "detailed" displays maximum information about each bundle').choices(['minimal', 'normal', 'detailed']).default('normal'))
    .option('-f, --fullScreenErrors [value]', 'Whether to show full-screen (overlay) errors', helpers_1.customParseBoolean, true)
    .option('-e, --eslint [value]', 'ESLint support', helpers_1.customParseBoolean, true)
    .option('-r, --hotRefresh  [value]', 'When true, enables webpack\'s Hot Module Replacement (HMR) feature, more info - https://github.com/s-KaiNet/spfx-fast-serve/blob/master/docs/HMR.md', helpers_1.customParseBoolean, false)
    .option('-q, --reactProfiling  [value]', 'When true, enables react profiling mode through React Chrome extension', helpers_1.customParseBoolean, false)
    .option('-t, --containers [value]', 'Explicitly enables containerized environment support', helpers_1.customParseBoolean, false)
    .option('-d, --debug [value]', 'Enables debug logging for fast-serve. In debug mode it prints more information about execution context', helpers_1.customParseBoolean, false)
    .version(packageJson.version, '-v, --version', 'Output the fast-serve version')
    .helpOption('-h, --help', 'Display help for command')
    .action(startDevServer_1.startDevServer);
const webpackCommand = commander_1.program.command('webpack')
    .description('Webpack related commands');
webpackCommand.command('extend')
    .description('Adds fast-serve webpack extensibility file to the project')
    .option('-f, --force', 'Forces to overwrite existing file', false)
    .action(createWebpackExtend_1.createWebpackExtend);
const configCommand = commander_1.program.command('config')
    .description('Configuration related commands');
configCommand.command('add')
    .description('Adds fast-serve configuration file to the project')
    .option('-f, --force', 'Forces to overwrite existing file', false)
    .action(createConfigFile_1.createConfigFile);
commander_1.program.parse(process.argv);
//# sourceMappingURL=serve.js.map