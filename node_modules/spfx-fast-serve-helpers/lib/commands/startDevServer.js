"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startDevServer = startDevServer;
const logger_1 = require("../common/logger");
const spawnProcess_1 = require("../common/spawnProcess");
const process_1 = require("process");
const helpers_1 = require("../common/helpers");
const path = __importStar(require("path"));
const settingsManager_1 = require("../common/settingsManager");
async function startDevServer(settings) {
    try {
        (0, settingsManager_1.initSettingsFromCli)(settings);
        logger_1.Logger.debug('Running fast-serve in debug mode');
        logger_1.Logger.debugEnvironmentInfo();
        await spawnSpfxBundle();
        await spawnDevServer();
    }
    catch (error) {
        if (error) {
            logger_1.Logger.error((error === null || error === void 0 ? void 0 : error.message) || error.toString());
            throw error;
        }
        else {
            logger_1.Logger.error('The process terminated unexpectedly');
            process.exit(1);
        }
    }
}
async function spawnSpfxBundle() {
    if (!(0, helpers_1.needToRunBundle)()) {
        logger_1.Logger.debug('Skipping bundle');
        return;
    }
    logger_1.Logger.debug('Running SPFx bundle');
    const startTime = process_1.hrtime.bigint();
    const bundleArgs = ['bundle', '--custom-serve'];
    if (settingsManager_1.serveSettings.locale) {
        bundleArgs.push(`--locale=${settingsManager_1.serveSettings.locale}`);
    }
    bundleArgs.push(`--max-old-space-size=${settingsManager_1.serveSettings.memory}`);
    await (0, spawnProcess_1.spawnProcess)('gulp', bundleArgs);
    const endTime = process_1.hrtime.bigint();
    logger_1.Logger.debug(`Finished SPFx bundle in ${(0, helpers_1.nanoToSeconds)(endTime - startTime)}s`);
}
async function spawnDevServer() {
    const env = { ...process.env };
    if (!env['NODE_OPTIONS']) {
        env['NODE_OPTIONS'] = '';
    }
    env['NODE_OPTIONS'] += ` --max-old-space-size=${settingsManager_1.serveSettings.memory}`;
    const nodeMajorVersion = parseInt(process.version.split('.')[0].substring(1), 10);
    if (nodeMajorVersion >= 17) {
        env['NODE_OPTIONS'] += ' --openssl-legacy-provider';
    }
    return await (0, spawnProcess_1.spawnProcess)('node', [path.resolve(__dirname, '../webpack/devServer.js'), '--config', JSON.stringify(settingsManager_1.serveSettings)], env);
}
//# sourceMappingURL=startDevServer.js.map