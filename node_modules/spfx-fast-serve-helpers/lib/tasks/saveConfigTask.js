"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSaveConfigTask = addSaveConfigTask;
const fs_1 = require("fs");
const path = __importStar(require("path"));
const ManifestPlugin_1 = require("@microsoft/spfx-heft-plugins/lib/spfxManifests/webpack/ManifestPlugin");
function addSaveConfigTask(build) {
    const saveConfigTask = build.subTask('save-webpack-config', (gulp, config, done) => {
        const serveAdditionalConfig = (generatedConfiguration) => {
            const saveDir = path.join(config.rootPath, 'temp');
            const saveTo = path.join(saveDir, '_webpack_config.json');
            if (!(0, fs_1.existsSync)(saveDir)) {
                (0, fs_1.mkdirSync)(saveDir);
            }
            let pluginOptions = null;
            for (const plugin of generatedConfiguration.plugins) {
                if (typeof plugin === 'object' && plugin.constructor && plugin.constructor.name === 'ManifestPlugin') {
                    pluginOptions = plugin._options;
                    break;
                }
            }
            if (pluginOptions == null)
                throw new Error('ManifestPlugin not found in webpack plugins');
            generatedConfiguration.plugins.push(new ManifestPlugin_1.ManifestPlugin({
                ...pluginOptions,
                useManifestsJsonForComponentDependencies: true
            }));
            (0, fs_1.writeFileSync)(saveTo, JSON.stringify(generatedConfiguration, null, 2));
            return generatedConfiguration;
        };
        if (!build.configureWebpack.taskConfig.additionalConfiguration) {
            build.configureWebpack.mergeConfig({
                additionalConfiguration: serveAdditionalConfig
            });
        }
        else {
            const oldConfigFunc = build.configureWebpack.taskConfig.additionalConfiguration;
            build.configureWebpack.mergeConfig({
                additionalConfiguration: (generatedConfiguration) => {
                    generatedConfiguration = oldConfigFunc(generatedConfiguration);
                    return serveAdditionalConfig(generatedConfiguration);
                }
            });
        }
        done();
    });
    build.rig.addPostTypescriptTask(saveConfigTask);
}
//# sourceMappingURL=saveConfigTask.js.map