"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resultConfig = void 0;
const path = __importStar(require("path"));
const webpack_1 = __importDefault(require("webpack"));
const copy_webpack_plugin_1 = __importDefault(require("copy-webpack-plugin"));
const del_1 = __importDefault(require("del"));
const fs_1 = require("fs");
const webpack_merge_1 = require("webpack-merge");
const helpers_1 = require("../common/helpers");
const baseConfig_1 = require("./baseConfig");
const settings_1 = require("../settings");
const consts_1 = require("../common/consts");
const rootFolder = path.resolve(process.cwd());
const createConfig = async function () {
    (0, helpers_1.checkVersions)();
    const baseConfig = await (0, baseConfig_1.createBaseConfig)();
    del_1.default.sync(['dist/*.js', 'dist/*.map'], { cwd: rootFolder });
    const originalWebpackConfig = (0, helpers_1.getJSONFile)('temp/_webpack_config.json');
    baseConfig.externals = originalWebpackConfig.externals;
    baseConfig.output = originalWebpackConfig.output;
    const entry = originalWebpackConfig.entry;
    baseConfig.entry = (0, helpers_1.getEntryPoints)(entry);
    baseConfig.output.publicPath = `https://${baseConfig.devServer.host}:${baseConfig.devServer.port}/dist/`;
    const manifest = (0, helpers_1.getJSONFile)('temp/manifests.json');
    baseConfig.devServer.static = [...baseConfig.devServer.static, ...(0, helpers_1.extractLibraryComponents)(manifest)];
    const { localizedResources, externals } = (0, helpers_1.getJSONFile)('config/config.json');
    const modulesMap = {};
    const originalEntries = Object.keys(entry);
    for (const { manifestData: jsModule } of manifest) {
        if (jsModule.loaderConfig
            && jsModule.loaderConfig.entryModuleId
            && originalEntries.indexOf(jsModule.loaderConfig.entryModuleId) !== -1) {
            const entryModuleId = jsModule.loaderConfig.entryModuleId;
            modulesMap[entryModuleId + '.js'] = {
                id: jsModule.id,
                version: jsModule.version,
                path: jsModule.loaderConfig.scriptResources[entryModuleId].path,
                isBundle: entry[jsModule.loaderConfig.entryModuleId].import.indexOf('bundle-entries') !== -1
            };
        }
    }
    baseConfig.output.filename = function (pathInfo) {
        const entryPointName = pathInfo.chunk.name + '.js';
        if (!modulesMap[entryPointName]) {
            return '[name].js';
        }
        return modulesMap[entryPointName].path;
    };
    const patterns = (0, helpers_1.addCopyLocalizedResources)(localizedResources);
    if (patterns && patterns.length > 0) {
        baseConfig.plugins.push(new copy_webpack_plugin_1.default({
            patterns
        }));
    }
    (0, settings_1.applyServeSettings)(baseConfig);
    const localExternals = (0, helpers_1.createLocalExternals)(externals);
    const localExternalsPatterns = (0, helpers_1.addCopyLocalExternals)(localExternals, manifest, originalEntries);
    if (localExternalsPatterns && localExternalsPatterns.length > 0) {
        baseConfig.plugins.push(new copy_webpack_plugin_1.default({
            patterns: localExternalsPatterns
        }));
    }
    return baseConfig;
};
const resultConfig = async () => {
    const originalConfig = await createConfig();
    const extendPath = path.join(rootFolder, `${consts_1.fastFolderName}/webpack.extend`);
    if ((0, fs_1.existsSync)(`${extendPath}.js`)) {
        const { transformConfig, webpackConfig } = require(extendPath);
        return (0, webpack_merge_1.merge)(transformConfig(originalConfig, webpack_1.default), webpackConfig);
    }
    return originalConfig;
};
exports.resultConfig = resultConfig;
//# sourceMappingURL=configureWebPack.js.map