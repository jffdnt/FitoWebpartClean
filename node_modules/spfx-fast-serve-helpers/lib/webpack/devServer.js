"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startDevServer = startDevServer;
const colors_1 = __importDefault(require("colors"));
const configureWebPack_1 = require("./configureWebPack");
const webpack_1 = __importDefault(require("webpack"));
const webpack_dev_server_1 = __importDefault(require("webpack-dev-server"));
const logger_1 = require("../common/logger");
const commander_1 = require("commander");
const settingsManager_1 = require("../common/settingsManager");
commander_1.program.option('--config <config>').parse();
const settings = JSON.parse(commander_1.program.opts().config);
(0, settingsManager_1.applySettings)(settings);
async function startDevServer() {
    try {
        const config = await (0, configureWebPack_1.resultConfig)();
        const compiler = (0, webpack_1.default)(config);
        const server = new webpack_dev_server_1.default(config.devServer, compiler);
        logger_1.Logger.log(`To load your scripts, use this query string: ${colors_1.default.yellow(`?debug=true&noredir=true&debugManifestsFile=https://${config.devServer.host}:${config.devServer.port}/temp/manifests.js`)}`);
        await server.start();
    }
    catch (error) {
        if (error) {
            logger_1.Logger.error((error === null || error === void 0 ? void 0 : error.message) || error.toString());
            throw error;
        }
        else {
            logger_1.Logger.error('The process exited with an error');
            process.exit(1);
        }
    }
}
startDevServer();
//# sourceMappingURL=devServer.js.map