"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBaseConfig = createBaseConfig;
const webpack_1 = __importDefault(require("webpack"));
const path = __importStar(require("path"));
const promises_1 = require("fs/promises");
const del_1 = __importDefault(require("del"));
const globby_1 = __importDefault(require("globby"));
const json5_1 = require("json5");
const certificateManager = require('@rushstack/debug-certificate-manager');
const certificateStore = new certificateManager.CertificateStore();
const AsyncComponentPlugin_1 = require("@microsoft/spfx-heft-plugins/lib/plugins/webpackConfigurationPlugin/webpackPlugins/AsyncComponentPlugin");
const fork_ts_checker_webpack_plugin_1 = __importDefault(require("fork-ts-checker-webpack-plugin"));
const TypeScriptResourcesPlugin_1 = require("../plugins/TypeScriptResourcesPlugin");
const helpers_1 = require("../common/helpers");
const tsconfig_paths_webpack_plugin_1 = __importDefault(require("tsconfig-paths-webpack-plugin"));
const settingsManager_1 = require("../common/settingsManager");
const rootFolder = path.resolve(process.cwd());
async function createBaseConfig() {
    const port = settingsManager_1.serveSettings.port;
    await (0, helpers_1.freePortIfInUse)(port);
    const host = 'https://localhost:' + port;
    const cssLoader = require.resolve('css-loader');
    const themedLoader = {
        loader: require.resolve('@microsoft/loader-load-themed-styles'),
        options: {
            async: true
        }
    };
    const externalComponents = (0, helpers_1.getExternalComponents)();
    const baseConfig = {
        target: 'web',
        mode: 'development',
        devtool: false,
        resolve: {
            extensions: ['.ts', '.tsx', '.js'],
            modules: ['node_modules']
        },
        context: rootFolder,
        module: {
            rules: [
                {
                    use: [
                        {
                            loader: require.resolve('ts-loader'),
                            options: {
                                transpileOnly: true,
                                compilerOptions: {
                                    declarationMap: false
                                }
                            },
                        }
                    ],
                    test: /\.tsx?$/,
                    exclude: /node_modules/
                },
                {
                    dependency: { not: ['url'] },
                    test: /\.js$/,
                    resolve: { fullySpecified: false }
                },
                {
                    use: [{
                            loader: require.resolve('file-loader'),
                            options: {
                                name: '[name]_[hash].[ext]',
                                esModule: false
                            }
                        }],
                    test: /\.(jpe?g|png|woff|eot|ttf|svg|gif|dds)$/i
                },
                {
                    use: [{
                            loader: 'html-loader'
                        }],
                    test: /\.html$/
                },
                {
                    test: /\.css$/,
                    use: [
                        themedLoader,
                        {
                            loader: cssLoader,
                            options: {
                                esModule: false,
                                modules: false
                            }
                        }
                    ]
                },
                {
                    test: function (fileName) {
                        return fileName.endsWith('.module.scss');
                    },
                    use: [
                        themedLoader,
                        require.resolve('spfx-css-modules-typescript-loader'),
                        {
                            loader: cssLoader,
                            options: {
                                esModule: false,
                                modules: {
                                    localIdentName: '[local]_[hash:base64:8]',
                                    exportLocalsConvention: 'as-is',
                                    mode: (resourcePath) => {
                                        if (resourcePath.endsWith('.css') && /node_modules/gi.test(resourcePath)) {
                                            return 'global';
                                        }
                                        return 'local';
                                    }
                                }
                            }
                        },
                        {
                            loader: require.resolve('postcss-loader'),
                            options: {
                                postcssOptions: {
                                    plugins: [[require.resolve('autoprefixer'), {
                                                overrideBrowserslist: ['> 1%', 'last 2 versions', 'ie >= 10']
                                            }]]
                                }
                            }
                        },
                        {
                            loader: require.resolve('sass-loader'),
                            options: {
                                implementation: require('sass')
                            }
                        }
                    ]
                },
                {
                    test: function (fileName) {
                        return !fileName.endsWith('.module.scss') && !fileName.endsWith('.vue.scss') && fileName.endsWith('.scss');
                    },
                    use: [
                        themedLoader,
                        {
                            loader: cssLoader,
                            options: {
                                esModule: false,
                                modules: false
                            }
                        },
                        {
                            loader: require.resolve('postcss-loader'),
                            options: {
                                postcssOptions: {
                                    plugins: [[require.resolve('autoprefixer'), {
                                                overrideBrowserslist: ['> 1%', 'last 2 versions', 'ie >= 10']
                                            }]]
                                }
                            }
                        },
                        {
                            loader: require.resolve('sass-loader'),
                            options: {
                                implementation: require('sass')
                            }
                        }
                    ]
                }
            ]
        },
        optimization: {
            moduleIds: 'deterministic',
            usedExports: true,
            sideEffects: true,
            removeEmptyChunks: true,
            realContentHash: false
        },
        performance: {
            hints: false
        },
        plugins: [
            new AsyncComponentPlugin_1.AsyncComponentPlugin({
                externalComponents
            }),
            new webpack_1.default.WatchIgnorePlugin({
                paths: [path.resolve(rootFolder, 'temp')]
            }),
            new fork_ts_checker_webpack_plugin_1.default({
                async: true
            }),
            new webpack_1.default.EvalSourceMapDevToolPlugin({
                exclude: /node_modules/,
                moduleFilenameTemplate: 'webpack:///../[resource-path]',
                fallbackModuleFilenameTemplate: 'webpack:///../[resource-path]?[hash]'
            }),
            new TypeScriptResourcesPlugin_1.TypeScriptResourcesPlugin(),
            new webpack_1.default.DefinePlugin({
                'DEBUG': JSON.stringify(true)
            })
        ],
        devServer: {
            hot: false,
            static: [
                {
                    directory: path.resolve(rootFolder, 'temp'),
                    publicPath: '/temp'
                }
            ],
            host: 'localhost',
            watchFiles: ['src/**/loc/**/*.js'],
            port: port,
            allowedHosts: 'all',
            historyApiFallback: true,
            devMiddleware: {
                writeToDisk: settingsManager_1.serveSettings.isLibraryComponent,
                publicPath: host + '/dist/',
            },
            headers: {
                'Access-Control-Allow-Origin': '*',
            },
            server: {
                type: 'https',
                options: {
                    cert: certificateStore.certificateData,
                    key: certificateStore.keyData
                }
            }
        }
    };
    const tsConfigPath = path.resolve(rootFolder, 'tsconfig.json');
    const tsConfigContent = (await (0, promises_1.readFile)(tsConfigPath)).toString();
    const tsconfig = (0, json5_1.parse)(tsConfigContent);
    if (tsconfig.compilerOptions.baseUrl) {
        baseConfig.resolve.plugins = [
            new tsconfig_paths_webpack_plugin_1.default({ configFile: tsConfigPath })
        ];
    }
    const files = globby_1.default.sync(['src/**/*.module.scss.d.ts'], { cwd: rootFolder });
    del_1.default.sync(files, { cwd: rootFolder });
    return baseConfig;
}
//# sourceMappingURL=baseConfig.js.map