const fs = require('fs');
const path = require('path');

const bannerMessage =
  '// This file is automatically generated.\n// Please do not change this file!\n\n/* tslint:disable */\n/* eslint-disable */\n';

const cssModuleExport = 'const cssExports: CssExports = {} as CssExports;\nexport default cssExports;\n';

const cssModuleToInterface = (cssModuleKeys) => {
  const interfaceFields = cssModuleKeys
    .sort()
    .map(key => `  '${key}': string;`)
    .join('\n');

  return `interface CssExports {\n${interfaceFields}\n}`;
};

const filenameToTypingsFilename = filename => {
  const dirName = path.dirname(filename);
  const baseName = path.basename(filename);
  return path.join(dirName, `${baseName}.ts`);
};

const enforceLFLineSeparators = text => {
  if (text) {
    // replace all CRLFs (Windows) by LFs (Unix)
    return text.replace(/\r\n/g, "\n");
  } else {
    return text;
  }
};

const compareText = (contentA, contentB) => {
  return enforceLFLineSeparators(contentA) === enforceLFLineSeparators(contentB);
};

const makeDoneHandlers = (callback, content, rest) => ({
  failed: e => callback(e),
  success: () => callback(null, content, ...rest)
});

const makeFileHandlers = filename => ({
  read: handler => fs.readFile(filename, { encoding: 'utf-8' }, handler),
  write: (content, handler) =>
    fs.writeFile(filename, content, { encoding: 'utf-8' }, handler)
});

const extractLocalExports = (content) => {
  let localExports = content.split('exports.locals')[1];
  if (!localExports) {
    localExports = content.split('___CSS_LOADER_EXPORT___.locals')[1];
  }
  return localExports;
}

const resourceMap = [];

module.exports = function (content, ...rest) {

  // on first load we have files from spfx build, so skip emitting to prevent concurrent compilation error
  if (resourceMap.indexOf(this.resourcePath) == -1) {
    resourceMap.push(this.resourcePath);
    return content;
  }

  const { failed, success } = makeDoneHandlers(this.async(), content, rest);

  const filename = this.resourcePath;

  const cssModuleInterfaceFilename = filenameToTypingsFilename(filename);
  const { read, write } = makeFileHandlers(cssModuleInterfaceFilename);

  const keyRegex = /"([^\\"]+)":/g;
  let match;
  const cssModuleKeys = [];

  const localExports = extractLocalExports(content);

  while ((match = keyRegex.exec(localExports))) {
    if (cssModuleKeys.indexOf(match[1]) < 0) {
      cssModuleKeys.push(match[1]);
    }
  }

  const cssModuleDefinition = `${bannerMessage}\n${cssModuleToInterface(cssModuleKeys)}\n${cssModuleExport}`;

  read((_, fileContents) => {
    if (!compareText(cssModuleDefinition, fileContents)) {
      write(cssModuleDefinition, err => {
        if (err) {
          failed(err);
        } else {
          success();
        }
      });
    } else {
      success();
    }
  });

};
